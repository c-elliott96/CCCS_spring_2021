#include <iostream>

#define WORD_LEN 8
#define MEM_LEN 10

class Process {
public:
  int size; // number of "words" of memory allocated to process
  int va; // virtual address of process - need more clarification here
  
  // default constructor
  Process(int size = 2) : size(size) {
    std::cout << "Created new Process of size " << size << '\n';
  }
};

class Memory {
public:
  int base; // base address of processes handled by Memory
  int size; // size of Memory. Equal to base + (size * P[i]->size)
  int limit; // limit of Memory, equal to base + size.
             // This serves as the holder of total Memory size
  Process * main_memory[MEM_LEN]; // Process * array; max len of 10

  Memory(int base = 0, int size = 0) : base(base),
				       size(size),
				       limit(limit)
  {
    // what do we need to do for barebones initialization?
  }

  void init_new_process() {
    // for creating a new Process, we need: size. We'll need a separate function
    // for capturing the virtual address
  }
};

int main() {
  
  Process * p = new Process(2);
  Memory * m = new Memory(0, 800);

  std::cout << "WORD_LEN = " << WORD_LEN << '\n';
  std::cout << "Hello, world\n";
  return 0;
}
